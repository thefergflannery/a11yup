import { Router } from 'express';
import OpenAI from 'openai';
import { config } from '../config';

const router = Router();
const openai = new OpenAI({
  apiKey: config.openai.apiKey,
});

router.post('/generate', async (req, res) => {
  try {
    const { imageUrl } = req.body;

    if (!imageUrl) {
      return res.status(400).json({ error: 'Image URL is required' });
    }

    // Call GPT-4 Vision API to analyze the image
    const response = await openai.chat.completions.create({
      model: "gpt-4-vision-preview",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: "Generate 3 different alt text suggestions for this image. For each suggestion, provide: 1) The alt text, 2) A confidence score (0-1), and 3) A brief explanation of why this description is appropriate. Focus on being specific, concise, and WCAG-compliant. Avoid phrases like 'image of' or 'picture of'. Format the response as JSON with an array of objects containing 'text', 'confidence', and 'reasoning' fields."
            },
            {
              type: "image_url",
              image_url: imageUrl
            }
          ]
        }
      ],
      max_tokens: 500
    });

    // Parse the GPT response
    const content = response.choices[0].message.content;
    let suggestions;
    
    try {
      suggestions = JSON.parse(content);
    } catch (error) {
      // If parsing fails, create a structured response from the text
      suggestions = [{
        text: content,
        confidence: 0.9,
        reasoning: "Generated by GPT-4 Vision"
      }];
    }

    res.json({ suggestions });
  } catch (error) {
    console.error('Error generating alt text:', error);
    res.status(500).json({ error: 'Failed to generate alt text' });
  }
});

export default router; 